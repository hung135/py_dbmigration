-- Function: ${dbschema}.${table_name}_upsert(integer)

-- DROP FUNCTION ${dbschema}.${table_name}_upsert(integer);

CREATE OR REPLACE FUNCTION ${dbschema}.${table_name}_upsert(p_file_id integer)
  RETURNS integer AS
$$$$
/*
** ============================================================================
** General
**    Name:         
**    Author:       AutoGenerated from py_dbmigration
**    Date Created:  
**    Purpose:      generate an "upsert" style function for ${table_name}
**
** Modification History
**    Date        By   Modification
**    ----------  ---  ------------
**    MM/DD/YYYY  XXX  XXX...
** ============================================================================
*/
DECLARE
   v_return_status INTEGER = 0;
   v_error_num logging.error_log.error_code%TYPE; --VARCHAR(10);
   v_error_message logging.error_log.error_message%TYPE; --VARCHAR(256);
   v_function_name logging.load_status.program_unit%TYPE = '${dbschema}.${table_name}_upsert';
   v_program_unit_type_code logging.load_status.program_unit_type_code%TYPE = 'PG_UPSERT';
   v_table_name logging.load_status.table_name%TYPE = '${dbschema}.${table_name}';
   v_prev_rec_count logging.load_status.previous_record_count%TYPE = 0; --INTEGER = 0;
   v_curr_rec_count logging.load_status.current_record_count%TYPE = 0; --INTEGER = 0;
   v_recs_inserted logging.load_status.records_inserted%TYPE = 0; --INTEGER = 0;
   v_recs_updated logging.load_status.records_updated%TYPE = 0; --INTEGER = 0;
   v_recs_deleted logging.load_status.records_deleted%TYPE = 0; --INTEGER = 0;
   v_last_success_run logging.load_status.start_date%TYPE = '1900-01-01 00:00:00.00000'; --TIMESTAMP  
   v_start_time TIMESTAMP = LOCALTIMESTAMP;
   v_end_time TIMESTAMP;
   v_exec_time INTERVAL;
   v_success CHAR(1);
   v_delete_success CHAR(1);
   v_update_success CHAR(1);
   v_insert_success CHAR(1);
   v_user_id logging.error_log.user_name%TYPE = 1;
   v_sql_stmt logging.error_log.sql_statement%TYPE = 'n/a';
   v_update_dtm TIMESTAMP = now();
 
BEGIN
 
   RAISE INFO '%','function name: '||v_function_name;
   RAISE INFO '%','   start_time: '||v_start_time;
   RAISE INFO '%','   table_name: '||v_table_name;
 
   SELECT max(start_date)
     FROM logging.load_status where table_name = v_table_name
          and program_unit = v_function_name
          and program_unit_type_code = v_program_unit_type_code
          and success= 'Y'
     INTO v_last_success_run;
 
   -- Get the count of records in the table before processing
   SELECT COUNT(*)
     FROM ${dbschema}.${table_name}
     INTO v_prev_rec_count;
 
   RAISE INFO '%','      previous record count: '||v_prev_rec_count;
 
 
   BEGIN -- Begin Inserts
      -- Insert records that do not exist
      
      ${upsert_sql}

    
      GET DIAGNOSTICS v_recs_inserted = ROW_COUNT;
      EXCEPTION
         WHEN OTHERS THEN
            v_insert_success := 'N';
            v_error_num := SQLSTATE;
            v_error_message := SQLERRM;
            v_sql_stmt = 'INSERT Section';
            RAISE NOTICE 'ERROR: %, MESSAGE: %', SQLSTATE, SQLERRM;
            PERFORM logging.error_log_insert(v_function_name, v_error_num, v_error_message, v_start_time, v_user_id, v_sql_stmt);
   END; -- End Inserts
 
   RAISE INFO '%','         records inserted: '||v_recs_inserted;
   RAISE INFO '%','         records updated: '||v_recs_updated;
   RAISE INFO '%','         records deleted: '||v_recs_deleted;
 
   IF v_insert_success = 'N'
      OR v_update_success = 'N'
      OR v_delete_success = 'N'
      THEN v_success := 'N';
   ELSE
      v_success := 'Y';
   END IF;
 
   -- Get the count of records in the table after processing
   SELECT COUNT(1)
     FROM ${dbschema}.${table_name}
     INTO v_curr_rec_count;
 
   RAISE INFO '%','      current record count: '||v_curr_rec_count;
 
   v_end_time := CLOCK_TIMESTAMP();
 
   RAISE INFO '%','   end_time: '||v_end_time;
 
   PERFORM logging.load_status_insert(
   v_table_name , 
   cast(v_function_name as varchar), 
   cast(v_program_unit_type_code as varchar),
   cast('N/A' as text),
   cast(v_success as varchar), 
   cast(v_start_time as timestamp), 
   cast(v_end_time as timestamp), 
   cast(v_prev_rec_count as integer), 
   cast(v_curr_rec_count as integer), 
   cast(v_recs_inserted as integer), 
   cast(v_recs_updated as integer), 
   cast(v_recs_deleted as integer), 
   cast(current_user as varchar),
   cast(v_end_time as timestamp));
 
   IF v_success = 'Y'
      THEN RETURN( 1 );
   ELSE
      RETURN( -1 );
   END IF;
   VACUUM ${dbschema}.${table_name};
 
END
$$$$
  LANGUAGE plpgsql;
ALTER FUNCTION ${dbschema}.${table_name}_upsert(integer)
  OWNER TO operational_dba;
